global {
    # tproxy port to listen.
    tproxy_port: 12345

    # Node connectivity check.
    check_url: 'https://connectivitycheck.gstatic.com/generate_204'
    check_interval: 15s

    # Now only support UDP and IP:Port.
    # Please make sure DNS traffic will go through and be forwarded by dae.
    dns_upstream: '1.1.1.1:53'

    # Now only support one interface.
    ingress_interface: docker0
}

# subscription will be resolved as nodes and merged into node pool below.
subscription {
    # Add your subscription links here.
}

node {
    # Add your node links here.
    # Support socks5, http, https, ss, ssr, vmess, vless, trojan, trojan-go
    'socks5://127.0.0.1:1080#HK'
    'ss://LINK'
}

group {
    my_group {
        # Pass node links as input of lua script filter.
        filter: name(keyword: HK)

        # Randomly select a node from the group for every connection.
        policy: fixed(0)
    }

    disney {
        # Pass node names as input of keyword/regex filter.
        filter: name(regex:'HK|SG', keyword:'JP') && name(keyword:'disney')

        # Select the node with min average of the last 10 latencies from the group for every connection.
        policy: min_avg10
    }

    netflix {
        # Pass node names as input of keyword filter.
        filter: name(keyword:netflix)

        # Select the first node from the group for every connection.
        policy: min
    }

    BT {
        # Pass node names as input of keyword filter.
        filter: name(regex:'.*')

        # Select the first node from the group for every connection.
        policy: random
    }
}

routing {
    l4proto(udp) && mac('02:42:ac:11:00:02') -> BT
    domain(geosite:category-ads) -> block
    domain(geosite:disney) -> disney
    domain(geosite:netflix) -> netflix
    ip(geoip:cn) -> direct
    domain(geosite:cn) -> direct
    final: my_group
}
